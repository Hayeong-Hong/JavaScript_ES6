1. 스프레드 문법
     - ...키워드로 사용
     - 스레드 문법은 하나로 뭉쳐있는 여러 값들의 집합을 펼쳐서 개별적인 값들의 목록으로 만듦
        //객체는 스프레드 문법을 사용할 수 없음
        //스프레드 문법의 결과값을 변수에 담을 수 없음
        //max같이 배열을 받지 못하는 함수에 적용시킬 수 있음
     - Rest 파라미터와는 완전 반대 개념이다
     - Rest 파라미터는 매개변수로 전달된 값들을 배열로 묶어주는것

2. 디스트럭처링 할당(비구조화 할당)
     - 배열같은 집합 또는 객체의 구조를 파괴하여 1개 이상의 변수에 개별적으로 할당하는 것
        //비구조화 할당을 할 때는 항상 오른쪽에 배열같은 집합이 지정되야 한다.
        //비구조화 할당의 기준은 인덱스다
        //순서대로 할당되어 변수의 개수를 요소의 개수와 맞춰줄 필요는 없음(공백을 이용해 뛰어넘기가능)
        //Rest파라미터와 함께 혼용 가능하다

3. set
     - set은 중복되지 않은 유일한 값들의 집합
     - 배열과 유사하지만 순서가 의미가 없고, 중복값이 허용되지 않으며, 인덱스로 접근할 수 없다.
     - set의 선언은 new Set();
     - 등장 전/후 중복제거 방법 참조(예제39)
        //Set이 등장하기 전 중복 제거
            //v : 현재 검사할 요소
            //i : 현재 인덱스
            //self : array자체(this)
            const uniq = array => array.filter((v, i, self) => (self.indexOf(v)===i));
            console.log(uniq([2,1,2,3,4,4,3,2,1]));

     - Set에 요소를 추가할 때는 add 사용
     - add도 체이닝 기법 사용가능, 중복값이면 오류는 안뜨지만 무시됨
     - 자바의 배열처럼 모든 형태의 변수를 가질 수 있음, 배열이나 객체도 들어갈 수 있음
     - Set 요소 존재 여부 확인 has
     ...보충

4. Map
     - Map은 키와 값을 쌍으로 가지는 컬렉션
     - 객체와의 차이점
        객체는 키로 사용할 수 있는 값 : 문자열과 심벌
        Map은 키로 사용할 수 있는 값 : 객체를 포함한 모든 값
        객체의 요소 개수확인 : length
        Map의 요소 개수확인 : size
     - Map의 생성은 new Map();

5. Promise(프로미스) ?o?
     - 자바스크립트 에서느 비동기 처리를 위한 하나의 패턴으로 콜백 함수를 사용함
     - 비동기 처리를 위해서 콜백 함수안데 콜백 함수를 호출하는 경우가 발생함
     - 콜백함수 안에 콜백함수를 계속하여 호출하는 것을 콜백 지옥이라고 함
     - 콜백지옥을 해결하기 위해 만들어진 문법이 프로미스

6. async/await
     - async/await는 프로미스 기반으로 움직인다.
     - async/await을 사용하면 비동기 처리인 프로미스를 동기처리하는 것처럼 사용가능
     - function앞에 async를 붙여주고 promise구문에 await를 붙여줌
     - 프로미스가 끝날 때 까지 기다리고 결과값을 변수에 담을 수 있음
     - 비동기 통신의 순서를 정할 수 있다.

7. 제네레이터
     - 제네레이터는 코드블록을 일시 중지했다가 필요한 시점에 다시 재개할 수 있는 특수한 함수
     - 제네레이터 선언방식  function*
     - 하나 이상의 yield 구문을 가져야만 한다
     - 화살표 함수로는 정의할 수 없음
     - 제네레이터는 객체로 생성하여 사용한다
     - next()라는 메소드를 사용하여 다음 yield를 만날 때까지의 코드를 실행
     - 마지막 yield가 사용되고 더이상 yield가 없을 때는 return;